{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _propTypes = require('prop-types');\n\nvar _event = require('./utils/event');\n\nvar _splice = require('./utils/splice');\n\nvar _splice2 = _interopRequireDefault(_splice);\n\nvar _trim = require('./utils/trim');\n\nvar _trim2 = _interopRequireDefault(_trim);\n\nvar _scrollParent = require('./utils/scrollParent');\n\nvar _scrollParent2 = _interopRequireDefault(_scrollParent);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar LISTEN_FLAG = 'data-react-wow';\nvar defaultBoundingClientRect = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n  width: 0,\n  height: 0\n};\nvar caches = {\n  listeners: [],\n  pending: [] // try to handle passive events\n\n};\nvar passiveEventSupported = false;\n\ntry {\n  var opts = Object.defineProperty({}, 'passive', {\n    get: function get() {\n      passiveEventSupported = true;\n    }\n  });\n  window.addEventListener('test', null, opts);\n} catch (e) {} // if they are supported, setup the optional params\n// IMPORTANT: FALSE doubles as the default CAPTURE value!\n\n\nvar passiveEvent = passiveEventSupported ? {\n  capture: false,\n  passive: true\n} : false;\n/**\n * Check if `component` is visible in overflow container `parent`\n * @param  {node} component React component\n * @param  {node} parent    component's scroll parent\n * @return {bool}\n */\n\nvar checkOverflowVisible = function checkOverflowVisible(component, parent) {\n  var node = _reactDom2.default.findDOMNode(component);\n\n  var parentTop = void 0;\n  var parentHeight = void 0;\n\n  try {\n    var _parent$getBoundingCl = parent.getBoundingClientRect();\n\n    parentTop = _parent$getBoundingCl.top;\n    parentHeight = _parent$getBoundingCl.height;\n  } catch (e) {\n    parentTop = defaultBoundingClientRect.top;\n    parentHeight = defaultBoundingClientRect.height;\n  }\n\n  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight; // calculate top and height of the intersection of the element's scrollParent and viewport\n\n  var intersectionTop = Math.max(parentTop, 0); // intersection's top relative to viewport\n\n  var intersectionHeight = Math.min(windowInnerHeight, parentTop + parentHeight) - intersectionTop; // height\n  // check whether the element is visible in the intersection\n\n  var top = void 0;\n  var height = void 0;\n\n  try {\n    var _node$getBoundingClie = node.getBoundingClientRect();\n\n    top = _node$getBoundingClie.top;\n    height = _node$getBoundingClie.height;\n  } catch (e) {\n    top = defaultBoundingClientRect.top;\n    height = defaultBoundingClientRect.height;\n  }\n\n  var offsetTop = top - intersectionTop; // element's top relative to intersection\n\n  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return offsetTop - offsets[0] <= intersectionHeight && offsetTop + height + offsets[1] >= 0;\n};\n/**\n * Check if `component` is visible in document\n * @param  {node} component React component\n * @return {bool}\n */\n\n\nvar checkNormalVisible = function checkNormalVisible(component) {\n  var node = _reactDom2.default.findDOMNode(component); // If this element is hidden by css rules somehow, it's definitely invisible\n\n\n  if (!(node.offsetWidth || node.offsetHeight || node.getClientRects().length)) return false;\n  var top = void 0;\n  var elementHeight = void 0;\n\n  try {\n    var _node$getBoundingClie2 = node.getBoundingClientRect();\n\n    top = _node$getBoundingClie2.top;\n    elementHeight = _node$getBoundingClie2.height;\n  } catch (e) {\n    top = defaultBoundingClientRect.top;\n    elementHeight = defaultBoundingClientRect.height;\n  }\n\n  var windowInnerHeight = window.innerHeight || document.documentElement.clientHeight;\n  var offsets = Array.isArray(component.props.offset) ? component.props.offset : [component.props.offset, component.props.offset]; // Be compatible with previous API\n\n  return top - offsets[0] <= windowInnerHeight && top + elementHeight + offsets[1] >= 0;\n};\n/**\n * Detect if element is visible in viewport, if so, set `visible` state to true.\n * If `once` prop is provided true, remove component as listener after checkVisible\n *\n * @param  {React} component   React component that respond to scroll and resize\n */\n\n\nvar checkVisible = function checkVisible(component) {\n  var node = _reactDom2.default.findDOMNode(component);\n\n  if (!node) {\n    return;\n  }\n\n  var parent = (0, _scrollParent2.default)(node);\n  var isOverflow = component.props.overflow && parent !== node.ownerDocument && parent !== document && parent !== document.documentElement;\n  var visible = isOverflow ? checkOverflowVisible(component, parent) : checkNormalVisible(component);\n\n  if (visible) {\n    if (!component.visible) {\n      caches.pending.push(component);\n      component.visible = true;\n      component.setState({\n        stopped: false\n      });\n      component.forceUpdate();\n    }\n  }\n};\n\nvar purgePending = function purgePending() {\n  caches.pending.forEach(function (component) {\n    return (0, _splice2.default)(caches.listeners, component);\n  });\n  caches.pending = [];\n};\n\nvar scrollHandler = function scrollHandler() {\n  caches.listeners.forEach(function (component) {\n    return checkVisible(component);\n  }); // Remove `once` component in listeners\n\n  purgePending();\n};\n\nvar ReactWOW = function (_React$Component) {\n  _inherits(ReactWOW, _React$Component);\n\n  function ReactWOW(props) {\n    _classCallCheck(this, ReactWOW);\n\n    var _this = _possibleConstructorReturn(this, (ReactWOW.__proto__ || Object.getPrototypeOf(ReactWOW)).call(this, props));\n\n    _this.customStyle = function (hidden) {\n      var _this$props = _this.props,\n          duration = _this$props.duration,\n          delay = _this$props.delay,\n          iteration = _this$props.iteration,\n          animation = _this$props.animation,\n          disabled = _this$props.disabled;\n      var style = {\n        animationName: hidden ? 'none' : animation,\n        visibility: hidden && !disabled ? 'hidden' : 'visible'\n      };\n\n      if (duration) {\n        style.animationDuration = duration;\n      }\n\n      if (delay) {\n        style.animationDelay = delay;\n      }\n\n      if (iteration) {\n        style.animationIterationCount = iteration;\n      }\n\n      return style;\n    };\n\n    _this.resetAnimation = function (e) {\n      if (e.type.toLowerCase().indexOf('animationend') !== -1) {\n        _this.setState({\n          stopped: true\n        }, function () {\n          var callback = _this.props.callback;\n\n          if (typeof callback === 'function') {\n            callback.call(_this, _reactDom2.default.findDOMNode(_this));\n          }\n        });\n      }\n    };\n\n    _this.visible = false;\n    _this.state = {\n      stopped: false\n    };\n    return _this;\n  }\n\n  _createClass(ReactWOW, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.props.disabled) {\n        return false;\n      }\n\n      if (this.props.overflow) {\n        var parent = (0, _scrollParent2.default)(_reactDom2.default.findDOMNode(this));\n\n        if (parent && typeof parent.getAttribute === 'function') {\n          var listenerCount = 1 + +parent.getAttribute(LISTEN_FLAG);\n\n          if (listenerCount === 1) {\n            (0, _event.on)(parent, 'scroll', scrollHandler, passiveEvent);\n          }\n\n          parent.setAttribute(LISTEN_FLAG, listenerCount);\n        }\n      } else if (!caches.listeners.length) {\n        var _props = this.props,\n            scroll = _props.scroll,\n            resize = _props.resize;\n\n        if (scroll) {\n          (0, _event.on)(window, 'scroll', scrollHandler, passiveEvent);\n        }\n\n        if (resize) {\n          (0, _event.on)(window, 'resize', scrollHandler, passiveEvent);\n        }\n      }\n\n      caches.listeners.push(this);\n      checkVisible(this);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      return this.visible;\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.props.disabled) {\n        return false;\n      }\n\n      if (this.props.overflow) {\n        var parent = (0, _scrollParent2.default)(_reactDom2.default.findDOMNode(this));\n\n        if (parent && typeof parent.getAttribute === 'function') {\n          var listenerCount = +parent.getAttribute(LISTEN_FLAG) - 1;\n\n          if (listenerCount === 0) {\n            (0, _event.off)(parent, 'scroll', scrollHandler, passiveEvent);\n            parent.removeAttribute(LISTEN_FLAG);\n          } else {\n            parent.setAttribute(LISTEN_FLAG, listenerCount);\n          }\n        }\n      }\n\n      (0, _splice2.default)(caches.listeners, this);\n\n      if (!caches.listeners.length) {\n        (0, _event.off)(window, 'scroll', scrollHandler, passiveEvent);\n        (0, _event.off)(window, 'resize', scrollHandler, passiveEvent);\n      }\n    }\n    /**\n     * Custom style\n     * @param  {boolean} hidden\n     */\n\n    /**\n     * Reset animation\n     * @param  {object} e\n     */\n\n  }, {\n    key: 'mergeProps',\n\n    /**\n     * Merge props\n     * @param  {object} props\n     */\n    value: function mergeProps(props) {\n      var _props2 = this.props,\n          animation = _props2.animation,\n          animateClass = _props2.animateClass;\n      var style = this.customStyle(!this.visible);\n      var className = this.visible ? animation + ' ' + (!this.state.stopped ? animateClass : '') : animation;\n      return _extends({}, props, {\n        style: _extends({}, props.style, style),\n        className: (0, _trim2.default)((props.className ? props.className : '') + ' ' + className),\n        onAnimationEnd: this.resetAnimation\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props3 = this.props,\n          children = _props3.children,\n          disabled = _props3.disabled;\n      return disabled ? children : children ? _react2.default.Children.map(children, function (child) {\n        return _react2.default.cloneElement(child, _this2.mergeProps(child.props));\n      }) : null;\n    }\n  }]);\n\n  return ReactWOW;\n}(_react2.default.Component);\n\nReactWOW.propTypes = {\n  duration: _propTypes.string,\n  delay: _propTypes.string,\n  iteration: _propTypes.string,\n  animation: _propTypes.string,\n  children: _propTypes.node,\n  scroll: _propTypes.bool,\n  resize: _propTypes.bool,\n  animateClass: _propTypes.string,\n  offset: (0, _propTypes.oneOfType)([_propTypes.number, (0, _propTypes.arrayOf)(_propTypes.number)]),\n  overflow: _propTypes.bool,\n  callback: _propTypes.func\n};\nReactWOW.defaultProps = {\n  duration: '',\n  // Animation duration\n  delay: '',\n  // Animation delay\n  iteration: '',\n  // Animation iteration count\n  animation: '',\n  // Animation name\n  scroll: true,\n  // Listen and react to scroll event\n  resize: true,\n  // Listen and react to resize event\n  animateClass: 'animated',\n  // Animation css class\n  offset: 0,\n  // Distance to the element when triggering the animation\n  overflow: false,\n  // If your components inside a overflow container, set this to true\n  disabled: false,\n  // Disable the animation\n  callback: function callback() {} // The callback is fired every time an animation is stoped\n\n};\nexports.default = ReactWOW;","map":null,"metadata":{},"sourceType":"script"}